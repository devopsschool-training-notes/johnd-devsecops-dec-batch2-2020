1234567890
======================
Rajesh Kumar
------
Shardha
-------------------------
4 Days - DevSecOps
-------------------------
Agenda
-----------------------
Docker		HALF
SonarQube	HALF

Jenkins		ONE

Selenium	HALF
Jmeter		HALF

Jacoco		HALF
DevSecOps 	- THEoRY	HALF
===================
Start - 9 30 AM IST
End - 6:00 PM IST
-------------------
Lunch - 1 - 2 PM IST
COFFEE
	15-20 mins
	11 AM 
	3.30 PM IST
==============================
Demo + LAB 
===============
AWS - 
===========================================================================
===========================================================================
Vmware
--------------
	vm mgmt tool


What is Docker?
----------------
	Its a Platform
	Aka Docker Engine
	Container mgmt tool
	Release
		Docker Community
		Docker Enterprise	https://www.devopsschool.com/blog/
	Verrsion
		20.X
	Written in Golang
	Written by Soloman - in 2013

	tool	
	-------------
	- Saving Cost	- For running APPS/Software in DataCenter/SDLC Cycle
	- Saving time	- For Deployment/Rollback of APPS/Software
	- Impr* Quality - Software Quality
	==================	
		
	mgmt

	
	Container????
	Container is running your APP with complete inde* resources required.
	
	Container is 
			ONE USER by USER NS
				attached with
					ONE PID
					ONE MNT (ROOT + USER + APP Fileststem)
					ONE NET


===========================================================================
What are the components we need to RUN one APP/Software? ANy APP?
What are the resources we need to RUN one APP/Software? ANy APP?
---------------------------------------------------------------------------
HARDWARE(CPU+RAM+STORAGE)
	--- OS
		Kernal
Type of Kernal Programs	AKA Namespace
			
						NEED	ALLOWED in OS	ALLOWED By KERNAL
- USER	by USER NS				1	MULTIPLE	MULTIPLE			
- RUNTIMELIB-APP(FileSystem)MNT	by MNT NS	1	1		MULTIPLE
- PID by PID NS					1	1		MULTIPLE	
- NETWORK - PORT by NET NS			1	1		MULTIPLE

FileSystem
--------------
collection of dirs/files FOR one Specific purpose.

APP -> Tomcat -> JAVA -> OS
Team -> Rootfs ->
------------------------------
	FileSystem

Types of FileSystem
------------------------------
BOOT FileSystem	AKA Kernal	(LINUX + WINDOWS)
ROOT FileSystem	"/"		RHEL - CENTOS - UB - FEDORA - SUSE - KALi
USER FileSystem	
APP FileSystem

TO Run any ONE APP
---------------------------
BOOT + ROOT + USER + APP
1 	1 	1 	1
================================
		OS
Kernal
The kernel is a computer program at the core of a computer's operating system that has complete control over everything in the system.

cgroups
cgroups (abbreviated from control groups) is a Linux kernel feature that limits, accounts for, and isolates the resource usage (CPU, memory, disk I/O, network, etc.) of a collection of processes.
---cgroups allocate CPU+RAM to PID.

==================================================
PC - Personal Computing
========================================================================
========================================================================
Evolution of Computing
-----------------------------------------------------------------------
				For running ApP
---------------------------------------------------------------------------

Before 2000			2000+			2020
		Internet
Physcial Server			Virtual Servers		Containers	

=========================================================================
Docker Architecture
Docker Components
Docker Installation
Docker Lifecycle - Work with Containers
- DEMO and LAB
Docker Lifecycle - Using Containers
- DEMO and LAB
	
====================================
Docker Architecture

Human -> Docker Client ---REST-> Docker Deamon -> ContainerD -> Kernal
	===================================
			Docker Engine


Docker Components
=======================================
Docker Engine	 - As discussed.

Docker Images
		Collections of Filesystem(S)
		- ROOT FileSystem	"/"		RHEL - CENTOS - UB - FEDORA - SUSE - KALi
		- USER FileSystem			tomcat	
		- APP FileSystem			jdk + tomcat

		One Copy of Image - Get Mounted to Each container.

Docker Registry
		Contains Repository
		- Image filesystems(s)
		
		Public
			hub.docker.com
			google registry
		Pvt
			artifactory
			nexus

Docker Container
	
When we "RUN" "Docker Image", 
			it create one USER using USER NS
			- One Copy of Image get mounted to USER - using MNT NS
			- ONE PID get attached to USER		- using PID NS
			- ONE NETwork get attached to USER	- using NET NS	

=====================================================
Docker Installation
=====================================================
13.232.180.186
centos
key - 
https://www.devopsschool.com/tutorial/docker/install-config/docker-install-commuityedition-centos-rhel.html

  1  sudo yum install -y yum-utils device-mapper-persistent-data lvm2
    2  sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
    3  sudo yum install â€“y https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
    4  sudo yum-config-manager --enable rhui-REGION-rhel-server-extras
    5  sudo yum install -y docker-ce
    6  sudo yum install docker-ce
    7  docker -v
    8  sudo systemctl enable docker
    9  sudo systemctl start docker
   10  docker info
   11  clear
   12  docker version
   13  clear
   14  docker -v
   15  docker info
   16  clear
   17  ls
   18  docker help
   19  clear
   20  ls
   21  history

Docker Lifecycle - Work with Containers
- DEMO and LAB
======================================================

VMs Lifecycle 
------------------------------------------------------------
Create -> Start -> Stop -> Start -> Restart -> Pause -> Unpuase -> kill -> Remove

Container Lifecycle 
------------------------------------------------------------
Create -> Start -> Stop -> Start -> Restart -> Pause -> Unpuase -> kill -> Remove


What App you want to run???
		rootfs			ubuntu
		rootfs + app		ubuntu + jdk +  jenkins		
========================
 14  docker -v
   15  docker info
   16  clear
   17  ls
   18  docker help
   19  clear
   20  ls
   21  history
   22  clear
   23  docker images
   24  docker ps
   25  docker ps -a
   26  docker pull jenkins/jenkins
   27  clear
   28  dcoker images
   29  docker images
   30  docker create --name rajesh1 jenkins/jenkins
   31  docker create --name rajesh2 jenkins/jenkins
   32  docker create --name rajesh3 jenkins/jenkins
   33  docker ps
   34  docker ps -a
   35  clear
   36  docker ps -a
   37  docker start 6cd5d7fc37a6
   38  docker ps -a
   39  docker start 27576c86ad86
   40  clear
   41  docker ps -a
   42  docker stop 6cd5d7fc37a6
   43  docker ps -a
   44  docker create jenkins/jenkins
   45  docker ps -a
   46  docker start 2937eac8cb82
   47  clear
   48  docker ps -a
   49  docker stop 27576c86ad86
   50  docker ps -a
   51  clear
   52  docker start 27576c86ad86
   53  docker ps -a
   54  docker restart 2937eac8cb82
   55  docker ps -a
   56  clear
   57  docker pause 2937eac8cb82
   58  docker ps -a
   59  docker unpause 2937eac8cb82
   60  docker ps -a
   61  docker kill 19d037104d62
   62  clear
   63  docker ps -a
   64  docker kill 2937eac8cb82
   65  docker ps -a
   66  docker
   67  clear
   68  docker ps -a
   69  docker rm 27576c86ad86
   70  docker rm 2937eac8cb82
   71  docker ps -a
   72  clear
   73  docker ps -a
   74  docker start 6cd5d7fc37a6 19d037104d62
   75  docker ps -a
   76  clear
   77  docker ps
   78  docker stop 6cd5d7fc37a6 27576c86ad86 19d037104d62
   79  docker ps
   80  docker rm 6cd5d7fc37a6 27576c86ad86 19d037104d62
   81  docker ps -a
   82  clear
   83  docker ps -a
   84  history

=================================================
QA Assignment
----------
STOP vs KILL
Pause VS Unpause
----------
	HINTS - docker help
		google.com


IP - 13.232.180.186
Ussername - centos
Password - centos123
====================================


When we "RUN" "Docker Image", 
			it create one USER using USER NS
			- One Copy of Image get mounted to USER - using MNT NS
			- ONE PID get attached to USER		- using PID NS
			- ONE NETwork get attached to USER	- using NET NS	



 85  clear
   86  clear
   87  docker ps
   88  docker ps -a
   89  ps -eaf | grep docker
   90  ps -eaf | grep containerd
   91  which docker
   92  docker images
   93  docker create --name=rajesh1 jenkins/jenkins
   94  docker ps
   95  docker ps -a
   96  clear
   97  ps -eaf | grep containerd
   98  ps -eaf | grep docker
   99  docker ps -a
  100  docker start ed145bf7be40
  101  ps -eaf | grep docker
  102  ps -eaf | grep containerd
  103  docker create --name=rajesh2 jenkins/jenkins
  104  docker start rajesh2
  105  ps -eaf | grep containerd
  106  clear
  107  docker ps
  108  ps -eaf | grep containerd
  109  clear
  110  ps
  111  ps -eaf | grep 8587
  112  ps -eaf | grep 8585
  113  ps -eaf | grep 7451
  114  ps -eaf | grep 7443
  115  ps -eaf | grep 2670
  116  ps -eaf | grep 1236
  117  clear
  118  ps -eaf
  119  clear
  120  ls
  121  ps -eaf | grep containerd
  122  ps -eaf | grep 19959
  123  clear
  124  df -kh
  125  cd /var/lib/docker/overlay2/08aec5c4402cea58d326b1473385cdfcbeb4781ae1155efa623d24ff233a8a69/merged
  126  ls
  127  pwd
  128  cd /
  129  ls
  130  clear
  131  df -kh
  132  docker ps
  133  docker exec  7b75e911ff77 ls /
  134  docker exec  ed145bf7be40 ls /
  135  docker exec  ed145bf7be40 ls /tmp
  136  docker exec  7b75e911ff77 ls /tmp
  137  docker exec  7b75e911ff77 touch /tmp/rajesh.txt
  138  docker exec  7b75e911ff77 ls /tmp
  139  docker exec  ed145bf7be40 ls /tmp
  140  clear
  141  ps -eaf
  142  clear
  143  docker ps
  144  docker exec 7b75e911ff77 ps -eaf
  145  docker exec ed145bf7be40 ps -eaf
  146  clear
  147  docker ps
  148  docker inspect 7b75e911ff77 | grep -i ip
  149  docker inspect ed145bf7be40 | grep -i ip
  150  ping 172.17.0.2
  151  ping 172.17.0.3
  152  clear
  153  history

====================================================================
How to use container?
--------------------------------------
PHYSCIAL Server		Virtial Server		Container 
is running		is running		is running
as long as 		as long as		as long as  	
PID 1 is running	PID 1 is running	PID 1 is running

PID 1 is SYSTEMD	PID 1 is SYSTEMD	PID 1 can be anything				
						java
						pytghon
						bash
						mysql
	
---------------------------------------------------------------------------------
run
---------------
pull -> create -> start -> Attached to container or become a container

---------------------------------------------------------------------------------
run -d 
---------------
pull -> create -> start -> DO NOT Attached to container or DO NOT  become a container


 154  clear
  155  docker ps
  156  docker exec 7b75e911ff77 ps -eaf
  157  docker exec 7b75e911ff77 kill 1
  158  docker ps
  159  docker ps -a
  160  clear
  161  ps -eaf
  162  clear
  163  docker ps
  164  clear
  165  ps
  166  docker run jenkins/jenkins
  167  docker ps
  168  history
  169  docker ps -a
  170  clear
  171  docker run -d jenkins/jenkins
  172  docker run -d jenkins/jenkins
  173  docker run -d jenkins/jenkins
  174  docker run -d jenkins/jenkins
  175  docker ps
  176  docker run ubuntu
  177  deocker ps
  178  docker ps
  179  docker ps -a
  180  ls
  181  ls
  182  ls
  183  top
  184  clear
  185  docker ps -a
  186  docker run -it -d ubuntu /bin/bash
  187  docker ps
  188  docker run -it ubuntu /bin/bash
  189  docker ps
  190  clear
  191  history


How to use container?
===========================================
1. Go inside
	using /bin/bash
exec
	it would execute any executable inside a container
	using -it and /bin/bash - u can inside it.
attach
	it get attached to PID1

 192  clear
  193  docker ps
  194  docker exec 0cd49b0de420 ls
  195  clear
  196  docker exec -it 0cd49b0de420 /bin/bash
  197  docker exec -it 0cd49b0de420 /bin/bash
  198  docker ps
  199  clear
  200  docker ps
  201  docker attach 4d7da74d97a3
  202  clear
  203  docker ps
  204  docker attach 77a1afec638e
  205  clear
  206  docker ps
  207  docker attach 3b9e7edeec1a
  208  docker ps
  209  clear
  210  history


2. Access from outside...using IP Address.

How to come out of the container without existing?
control +p+q

docker run -d jenkins/jenkins
docker run -d -p 8080:8080 jenkins/jenkins
docker run -d -p 8090:8080 jenkins/jenkins



 211  clear
  212  docker ps
  213  docker inspect 58e080d0451d | grep -i ip
  214  ping 172.17.0.4
  215  clear
  216  curl http://172.17.0.4:8080
  217  clerar
  218  clear
  219  docker ps
  220  080d0451d   jenkins/jenkins   "/sbin/tini -- /usr/â€¦"   22 minutes ago   Up 22 minutes   8080/tcp, 50000/tcp   crazy_mendeleev
  221  ea44bdd99558   jenkins/jenkins   "/sbin/tini -- /usr/â€¦"   22 minutes ago   Up 22 minutes   8080/tcp, 50000/tcp   jovial_leakey
  222  docker stop $(docker ps -a -q)
  223  docker rm $(docker ps -a -q)
  224  clear
  225  docker ps -a
  226  docker run -d -p 8080:8080 jenkins
  227  lear
  228  clear
  229  docker run -d -p 8080:8080 jenkins/jenkins
  230  docker run -d -p 8090:8080 jenkins/jenkins
  231  docker ps
  232  clear
  233  docker run -d jenkins/jenkins
  234  docker ps
  235  history









